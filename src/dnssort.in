#! @PERL@
#
# Perl script to sort DNS names
# 
# $Id$

#**********************************************************************
#*  Copyright (C) 2004-2006 Remi Denis-Courmont.                      *
#*  This program is free software; you can redistribute and/or modify *
#*  it under the terms of the GNU General Public License as published *
#*  by the Free Software Foundation; version 2 of the license.        *
#*                                                                    *
#*  This program is distributed in the hope that it will be useful,   *
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of    *
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.              *
#*  See the GNU General Public License for more details.              *
#*                                                                    *
#*  You should have received a copy of the GNU General Public License *
#*  along with this program; if not, you can get it from:             *
#*  http://www.gnu.org/copyleft/gpl.html                              *
#**********************************************************************

use strict;
#use locale; -- not very useful for DNS

my $reverse = 0;
my $end_opts = 0;
my @files = ();

# Parse command line
while ($_ = shift)
{
	if (/^-./ and not $end_opts)
	{
		if (/^--version$/ or /^-V$/)
		{
			print "dnssort version @VERSION@\n";
			exit 0;
		}
		elsif (/^--help$/ or /^-h$/)
		{
			print "Usage: dnssort\n".
			      "Sorts DNS hostnames from input.\n";
			exit 0;
		}
		elsif (/^--reverse$/ or /^-r$/)
		{
			$reverse = 1;
		}
		elsif (/^--$/)
		{
			$end_opts = 1;
		}
		else
		{
			print STDERR "$_: unknown option\n";
			exit 1;
		}
	}
	else
	{
		push @files, $_;
	}
}

# No files specified -> Use standard input
if ($#files < 0)
{
	push @files, '-';
}

# Read files
my @names = ();

foreach (@files)
{
	open FD,"< $_" or die "$_: $!\n";
	while(<FD>)
	{
		chomp;
		split /\./;
		push @names, join('.', reverse @_);
	}
	close FD;
}

# Sort entries
@names = sort { lc($a) cmp lc($b) } @names;
if ($reverse)
{
	@names = reverse @names;
}

# Print results
foreach (@names)
{
	split /\./;
	print join('.', reverse @_)."\n";
}
 
